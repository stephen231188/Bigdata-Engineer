/**** VIEW ***/

CREATE OR REPLACE VIEW emp_details_view
   AS SELECT
   e.employee_id, 
   e.job_id, 
   e.manager_id, 
   e.department_id,
   d.department_name
   FROM
   employees e inner join
   departments d
   on e.department_id = d.department_id;

/****SELF JOIN ***/

SELECT e1.last_name||' works for '||e2.last_name  
   "employees and Their Managers" , e1.*, e2.last_name
FROM employees e1 join employees e2  
on e1.manager_id = e2.employee_id 
ORDER BY e1.last_name;


/*** LEFT OUTER JOIN ***/

SELECT d.department_id, e.last_name 
FROM departments d LEFT OUTER JOIN employees e 
ON d.department_id = e.department_id 
ORDER BY d.department_id, e.last_name;

/*** RIGHT OUTER JOIN ****/

SELECT d.department_id, e.last_name 
FROM departments d RIGHT OUTER JOIN employees e 
   ON d.department_id = e.department_id 
   ORDER BY d.department_id, e.last_name;

SET SQL_SAFE_UPDATES=0;
   
delete from departments where department_id=100;

SET SQL_SAFE_UPDATES=1;
   
/*** FULL OUTER JOIN ****/

SELECT d.department_id, e.last_name 
FROM departments d LEFT OUTER JOIN employees e 
ON d.department_id = e.department_id 
union all
SELECT d.department_id, e.last_name 
FROM departments d RIGHT OUTER JOIN employees e 
ON d.department_id = e.department_id;
   
/*** Sub Query Example ***/

SELECT * FROM employees 
WHERE department_id NOT IN 
(SELECT department_id FROM departments 
WHERE location_id = 1700)
ORDER BY last_name;
   
   
/*** showing top 10 salary employee ****/

SELECT *FROM 
    (
    SELECT *FROM employees
    ORDER BY Salary desc
    ) a
    order by salary desc
limit 10;

or 

   SELECT * FROM 
     (
      SELECT FIRST_NAME, LAST_NAME, SALARY,
      RANK() OVER (ORDER BY SALARY DESC) EMPRANK
      FROM employees
     )
    WHERE emprank <= 10;




/***** ROW_NUMBER, DENSE_RANK, RANK ***/

    select employee_id, first_name, job_id, hire_date, salary,department_id,
       row_number() OVER ( order by salary desc,employee_id) as Rw_no,
       rank() OVER (partition by department_id order by salary ) as Rank_order,
       dense_rank() over (partition by department_id order by salary ) as Dense_rank_order
from employees;





SELECT first_name, 
SUBSTR(first_name, 1,4) AS NEW,
LOWER(first_name) AS NEW4,
CONCAT(first_name,last_name) AS NEW3,
LTRIM(first_name) AS LTR,
REPLACE(first_name,'a','z') as cnt
FROM employees;

SELECT 
FIRST_NAME,
SALARY,
CASE 
WHEN SALARY BETWEEN 3000 AND 4000 THEN 'AVERAGE_PAY'
WHEN SALARY >4000 THEN 'HIGH_PAID'
WHEN SALARY<3000 THEN 'UNDER_PAY'
END AS CATEGORY_OF_SALARY, employee_id
FROM employees